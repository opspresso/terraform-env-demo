name: tf-plan

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - main
      - master
    paths:
      - .github/workflows/tf-plan.yaml

env:
  AWS_ACCOUNT_ID: "396608815058"
  AWS_REGION: "ap-northeast-2"
  AWS_ROLE_NAME: "terraform-env-demo"

jobs:
  build:
    runs-on: ubuntu-24.04
    # runs-on: [ self-hosted, linux, x64 ]

    permissions:
      id-token: write
      contents: read

    strategy:
      fail-fast: false
      matrix:
        path:
          - demo/2-vpc
          - demo/4-alb
          - demo/6-role
          - demo/7-eks

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Linux 🐧
        run: |
          command -v unzip >/dev/null || apt install -y unzip

      - name: Setup Node 📝
        uses: actions/setup-node@v4
        with:
          node-version: 20 # node version

      - name: Setup Terraform 📝
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.5" # terraform version

      - name: Configure AWS Credentials 🔑
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: github-actions-ci-bot
          role-to-assume: arn:aws:iam::${{ env.AWS_ACCOUNT_ID }}:role/${{ env.AWS_ROLE_NAME }}

      - name: Initialize Terraform 📝
        env:
          GIT_SSH_COMMAND: "echo '${{ secrets.GH_SSH_KEY }}' > id_rsa
            && ssh-keyscan github.com > known_hosts
            && chmod 600 id_rsa known_hosts
            && ssh -i ./id_rsa -o UserKnownHostsFile=./known_hosts"
        run: |
          aws sts get-caller-identity --output=json | grep "Arn" | cut -d'"' -f4
          cd ${{ matrix.path }}
          terraform init -input=false

      - name: Plan Terraform 📝
        id: plan
        continue-on-error: true
        run: |
          aws sts get-caller-identity --output=json | grep "Arn" | cut -d'"' -f4
          cd ${{ matrix.path }}
          terraform plan -input=false -no-color -lock=false

      - name: Reformat Plan 📝
        run: |
          cat <<EOF > plan.txt
          ${{ steps.plan.outputs.stdout || steps.plan.outputs.stderr }}
          EOF
          sed -E 's/^([[:space:]]+)([-+])/\2\1/g' plan.txt

      - name: Make Message 📝
        id: message
        continue-on-error: true
        run: |
          PLAN="$(cat plan.txt | grep 'Plan:')"
          echo $PLAN
          [ -z "${PLAN}" ] || cat <<EOF > slack_message.json
          {
            "channel": "sandbox",
            "icon_emoji": ":terraform:",
            "username": "terraform",
            "text": ":warning: Terraform Plan 에 변경 사항이 있습니다.",
            "attachments": [{
              "color": "warning",
              "title": "${{ matrix.path }}",
              "text": "${PLAN}"
            }]
          }
          EOF

      - name: Post Slack 📩
        if: steps.message.outcome == 'success'
        uses: opspresso/action-slack@master
        env:
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          JSON_PATH: slack_message.json
